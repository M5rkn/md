"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç
"""
import os
import sys
import time
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.api.routes import api_router
from app.core.config import settings
from app.core.exceptions import setup_exception_handlers
from app.core.logging import setup_logging
from app.database.connection import init_db, close_db_connection


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek API
    if settings.DEEPSEEK_API_KEY:
        logger.info("‚úÖ DeepSeek API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è DeepSeek API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rule-based –∞–Ω–∞–ª–∏–∑")
    
    yield
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await close_db_connection()
    logger.info("üëã –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Medical AI Analyzer",
    description="–ò–ò-–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ë–ê–î–∞–º",
    version="1.0.0",
    docs_url="/docs" if settings.DEBUG else None,
    redoc_url="/redoc" if settings.DEBUG else None,
    openapi_url="/openapi.json" if settings.DEBUG else None,
    lifespan=lifespan,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Trusted Host middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=settings.ALLOWED_HOSTS,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
setup_exception_handlers(app)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤
app.include_router(api_router, prefix="/api/v1")


@app.get("/", tags=["Health"])
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    """
    return {
        "message": "–ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç",
        "status": "running",
        "version": "1.0.0",
        "docs": "/docs" if settings.DEBUG else None,
    }


@app.get("/health", tags=["Health"])
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
    """
    return {
        "status": "healthy",
        "service": "ai-analyzer",
        "version": "1.0.0",
        "debug": settings.DEBUG,
        "ai_configured": bool(settings.DEEPSEEK_API_KEY),
    }


@app.middleware("http")
async def log_requests(request: Request, call_next):
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(
        f"–ó–∞–ø—Ä–æ—Å: {request.method} {request.url.path}",
        extra={
            "method": request.method,
            "path": request.url.path,
            "query_params": str(request.query_params),
            "client_ip": request.client.host,
        }
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    process_time = time.time() - start_time
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    logger.info(
        f"–û—Ç–≤–µ—Ç: {response.status_code}",
        extra={
            "status_code": response.status_code,
            "process_time": round(process_time, 4),
        }
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    response.headers["X-Process-Time"] = str(process_time)
    
    return response


if __name__ == "__main__":
    import time
    import uvicorn
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level="info" if settings.DEBUG else "warning",
        access_log=settings.DEBUG,
    ) 