"""
API —Ä–æ—É—Ç—ã –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import Dict, Any
from loguru import logger

from app.services.ai_service import AIAnalysisService
from app.schemas.response import AnalysisRequest

api_router = APIRouter()


class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç health check"""
    success: bool
    message: str
    status: str


class AnalysisRequestAPI(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∞–Ω–∫–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    form_data: Dict[str, Any]
    user_id: str


class AnalysisResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    success: bool
    recommendations: list
    analysis: Dict[str, Any]


@api_router.get("/", response_model=Dict[str, str])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {"message": "AI Analyzer Service v1.0"}


@api_router.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    logger.info("Health check requested")
    return HealthResponse(
        success=True,
        message="AI Analyzer Service is running",
        status="healthy"
    )


@api_router.post("/analyze", response_model=AnalysisResponse)
async def analyze_form(request: AnalysisRequestAPI):
    """–ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∞–Ω–∫–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é DeepSeek AI"""
    try:
        logger.info(f"üß† Analysis requested for user {request.user_id}")
        logger.info(f"üìù Form data received: {list(request.form_data.keys())}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AI —Å–µ—Ä–≤–∏—Å–∞
        ai_service = AIAnalysisService()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç AnalysisRequest
        analysis_request = AnalysisRequest(
            form_id=f"form_{request.user_id}",
            user_id=request.user_id,
            answers=request.form_data
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é DeepSeek
        logger.info("üöÄ Calling DeepSeek API for analysis...")
        ai_result = await ai_service.analyze_medical_form(analysis_request)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç API –æ—Ç–≤–µ—Ç–∞
        recommendations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (AIAnalysisResponse –∏–ª–∏ fallback)
        if hasattr(ai_result, 'recommended_supplements'):
            # –û–±—ã—á–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
            for supp_rec in ai_result.recommended_supplements:
                recommendations.append({
                    "supplement_id": getattr(supp_rec, 'supplement_id', f"ai_{len(recommendations)}"),
                    "name": supp_rec.name,
                    "reason": supp_rec.reason,
                    "dosage": supp_rec.dosage,
                    "confidence": getattr(supp_rec, 'confidence', 0.85)
                })
            
            analysis_data = {
                "health_score": int(ai_result.confidence * 100),
                "risk_factors": ["–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –ò–ò"],
                "recommendations_count": len(recommendations)
            }
        else:
            # Fallback –∞–Ω–∞–ª–∏–∑ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict)
            if isinstance(ai_result, dict) and 'supplements' in ai_result:
                for supp_id, supp_rec in ai_result['supplements'].items():
                    recommendations.append({
                        "supplement_id": supp_id,
                        "name": supp_rec.name if hasattr(supp_rec, 'name') else supp_rec.get('name', ''),
                        "reason": supp_rec.reason if hasattr(supp_rec, 'reason') else supp_rec.get('reason', ''),
                        "dosage": supp_rec.dosage if hasattr(supp_rec, 'dosage') else supp_rec.get('dosage', ''),
                        "confidence": getattr(supp_rec, 'confidence', supp_rec.get('confidence', 0.7))
                    })
                
                analysis_data = {
                    "health_score": int(ai_result.get('confidence', 0.7) * 100),
                    "risk_factors": ["–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω (DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)"],
                    "recommendations_count": len(recommendations)
                }
            else:
                # –°–æ–≤—Å–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback
                recommendations = [{
                    "supplement_id": "emergency_fallback",
                    "name": "–ú—É–ª—å—Ç–∏–≤–∏—Ç–∞–º–∏–Ω—ã",
                    "reason": "–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–∞",
                    "dosage": "1 –∫–∞–ø—Å—É–ª–∞ –≤ –¥–µ–Ω—å",
                    "confidence": 0.6
                }]
                
                analysis_data = {
                    "health_score": 60,
                    "risk_factors": ["–û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ DeepSeek"],
                    "recommendations_count": 1
                }
        
        logger.info(f"‚úÖ Analysis completed: {len(recommendations)} recommendations")
        
        return AnalysisResponse(
            success=True,
            recommendations=recommendations,
            analysis=analysis_data
        )
        
    except Exception as e:
        logger.error(f"‚ùå Analysis failed: {str(e)}")
        logger.exception("Full error details:")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        fallback_recommendations = [
            {
                "supplement_id": "fallback_001",
                "name": "–ú—É–ª—å—Ç–∏–≤–∏—Ç–∞–º–∏–Ω—ã",
                "reason": "–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ (fallback)",
                "dosage": "1 –∫–∞–ø—Å—É–ª–∞ –≤ –¥–µ–Ω—å",
                "confidence": 0.7
            }
        ]
        
        return AnalysisResponse(
            success=True,
            recommendations=fallback_recommendations,
            analysis={
                "health_score": 70,
                "risk_factors": ["–û—à–∏–±–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞"],
                "recommendations_count": len(fallback_recommendations)
            }
        ) 