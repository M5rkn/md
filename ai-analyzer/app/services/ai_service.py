import json
import asyncio
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import openai
from loguru import logger

from app.core.config import settings
from app.schemas.response import (
    AIAnalysisResponse, 
    SupplementRecommendation, 
    AnalysisRequest,
    FormAnswersValidation
)
from app.services.database_service import DatabaseService
from app.services.cache_service import CacheService

class AIAnalysisService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç"""
    
    def __init__(self):
        # DeepSeek –∫–ª–∏–µ–Ω—Ç (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
        if settings.DEEPSEEK_API_KEY:
            logger.info(f"üîë DeepSeek API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {settings.DEEPSEEK_API_KEY[:8]}...")
            logger.info(f"üåê DeepSeek URL: {settings.DEEPSEEK_BASE_URL}")
            self.deepseek_client = openai.AsyncOpenAI(
                api_key=settings.DEEPSEEK_API_KEY,
                base_url=settings.DEEPSEEK_BASE_URL
            )
        else:
            logger.warning("‚ö†Ô∏è DeepSeek API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ç–æ–ª—å–∫–æ rule-based –∞–Ω–∞–ª–∏–∑")
            self.deepseek_client = None
        
        self.db_service = DatabaseService()
        self.cache_service = CacheService()
        
    async def analyze_medical_form(self, request: AnalysisRequest) -> AIAnalysisResponse:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∞–Ω–∫–µ—Ç—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç hash map —Å –ë–ê–î–∞–º–∏ + —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–∫–∞–∑—á–∏–∫–∞
        """
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = self._generate_cache_key(request.answers)
            cached_result = await self.cache_service.get_analysis(cache_key)
            
            if cached_result:
                logger.info(f"Returning cached analysis for form {request.form_id}")
                return cached_result
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            validated_answers = self._validate_form_answers(request.answers)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ë–ê–î–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            supplements_catalog = await self.db_service.get_supplements_catalog()
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ DeepSeek API
            analysis_result = await self._analyze_with_ai(
                validated_answers, 
                supplements_catalog
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            processing_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            response = AIAnalysisResponse(
                analysis_id=f"analysis_{request.form_id}_{int(datetime.now().timestamp())}",
                recommended_supplements=analysis_result["supplements"],
                recommendations_text=analysis_result["text"],
                confidence=analysis_result["confidence"],
                processing_time_ms=processing_time
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
            await self.cache_service.store_analysis(cache_key, response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db_service.save_analysis_result(
                request.form_id,
                request.user_id,
                response
            )
            
            logger.info(f"Analysis completed for form {request.form_id} in {processing_time}ms")
            return response
            
        except Exception as e:
            logger.error(f"Analysis failed for form {request.form_id}: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return AIAnalysisResponse(
                analysis_id=f"failed_{request.form_id}",
                recommended_supplements={},
                recommendations_text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
                confidence=0.0,
                processing_time_ms=int((datetime.now() - start_time).total_seconds() * 1000)
            )
    
    async def _analyze_with_ai(
        self, 
        form_answers: Dict[str, Any], 
        supplements_catalog: List[Dict]
    ) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ DeepSeek API"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
        prompt = self._build_analysis_prompt(form_answers, supplements_catalog)
        
        system_message = """–¢—ã - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. 
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –¥–∞–≤–∞–π –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏ –ø–∏—Ç–∞–Ω–∏—é.
        
        –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
        {
            "recommendations": {
                "rec_1": {
                    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    "dosage": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é",
                    "priority": "high",
                    "reason": "–ü—Ä–∏—á–∏–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
                }
            },
            "text": "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏...",
            "confidence": 0.85
        }
        
        –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ç–∞–≤—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞."""
        
        # –ü—Ä–æ–±—É–µ–º DeepSeek
        if self.deepseek_client:
            try:
                logger.info("üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ DeepSeek API...")
                logger.info(f"üìù –ú–æ–¥–µ–ª—å: {settings.DEEPSEEK_MODEL}")
                logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: max_tokens={settings.DEEPSEEK_MAX_TOKENS}, temp={settings.DEEPSEEK_TEMPERATURE}")
                logger.info(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                response = await self.deepseek_client.chat.completions.create(
                    model=settings.DEEPSEEK_MODEL,
                    messages=[
                        {"role": "system", "content": system_message},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=settings.DEEPSEEK_MAX_TOKENS,
                    temperature=settings.DEEPSEEK_TEMPERATURE,
                    timeout=settings.DEEPSEEK_TIMEOUT
                )
                
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API")
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç DeepSeek
                ai_response = response.choices[0].message.content
                logger.info(f"üìÑ –û—Ç–≤–µ—Ç DeepSeek: {ai_response[:200]}...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try:
                    analysis_data = json.loads(ai_response)
                    logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                except json.JSONDecodeError as json_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç DeepSeek: {json_error}")
                    logger.error(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {ai_response}")
                    raise
                
                logger.info("‚úÖ DeepSeek –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                return self._process_ai_response(analysis_data)
                
            except Exception as e:
                logger.error(f"‚ùå DeepSeek API error: {e}")
                logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                logger.info("üîß –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ rule-based –∞–Ω–∞–ª–∏–∑...")
        else:
            logger.warning("‚ö†Ô∏è DeepSeek –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ï—Å–ª–∏ DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º rule-based –∞–Ω–∞–ª–∏–∑
        logger.warning("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º rule-based –∞–Ω–∞–ª–∏–∑ (DeepSeek –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        return await self._fallback_rule_based_analysis(form_answers, supplements_catalog)
    
    def _process_ai_response(self, analysis_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI API"""
        recommendations_dict = {}
        
        for rec_id, rec_data in analysis_data.get("recommendations", {}).items():
            recommendations_dict[rec_id] = SupplementRecommendation(
                name=rec_data.get("name", ""),
                dosage=rec_data.get("dosage", ""),
                priority=rec_data.get("priority", "medium"),
                reason=rec_data.get("reason", "")
            )
        
        return {
            "supplements": recommendations_dict,
            "text": analysis_data.get("text", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"),
            "confidence": analysis_data.get("confidence", 0.7)
        }
    
    def _build_analysis_prompt(
        self, 
        form_answers: Dict[str, Any], 
        supplements_catalog: List[Dict]
    ) -> str:
        """–°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò"""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"""
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - –í–æ–∑—Ä–∞—Å—Ç: {form_answers.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
        - –ü–æ–ª: {form_answers.get('gender', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
        - –í–µ—Å: {form_answers.get('weight', '–Ω–µ —É–∫–∞–∑–∞–Ω')} –∫–≥
        - –†–æ—Å—Ç: {form_answers.get('height', '–Ω–µ —É–∫–∞–∑–∞–Ω')} —Å–º
        - –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {', '.join(form_answers.get('chronic_diseases', [])) or '–Ω–µ—Ç'}
        - –¢–µ–∫—É—â–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞: {', '.join(form_answers.get('current_medications', [])) or '–Ω–µ—Ç'}
        - –°–∏–º–ø—Ç–æ–º—ã: {', '.join(form_answers.get('symptoms', [])) or '–Ω–µ—Ç'}
        - –¶–µ–ª–∏: {', '.join(form_answers.get('goals', [])) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
        """
        
        # –ö–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ë–ê–î–æ–≤
        catalog_info = "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ë–ê–î—ã:\n"
        for supplement in supplements_catalog[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            catalog_info += f"- ID: {supplement['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {supplement['name']}, "
            catalog_info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {supplement['description']}, –¢–µ–≥–∏: {', '.join(supplement.get('tags', []))}\n"
        
        instructions = """
        
        –ó–∞–¥–∞—á–∞:
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –í—ã–±–µ—Ä–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ë–ê–î–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
        3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ë–ê–î–∞ —É–∫–∞–∂–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞
        4. –ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ (200-400 —Å–ª–æ–≤)
        5. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º—è–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—Ä–∞—á–æ–º
        
        –ü—Ä–∏–Ω—Ü–∏–ø—ã –ø–æ–¥–±–æ—Ä–∞:
        - –£—á–∏—Ç—ã–≤–∞–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Å–∏–º–ø—Ç–æ–º—ã –∏ —Ü–µ–ª–∏
        - –ò–∑–±–µ–≥–∞–π –ë–ê–î–æ–≤ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏
        - –û—Ç–¥–∞–≤–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ –±–∞–∑–æ–≤—ã–º –ë–ê–î–∞–º
        - –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –ë–ê–î—ã –±–µ–∑ —á–µ—Ç–∫–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π
        """
        
        return user_info + catalog_info + instructions
    
    async def _fallback_rule_based_analysis(
        self,
        form_answers: Dict[str, Any],
        supplements_catalog: List[Dict]
    ) -> Dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π rule-based –∞–Ω–∞–ª–∏–∑"""
        
        logger.info("Using fallback rule-based analysis")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–±–æ—Ä–∞ –ë–ê–î–æ–≤
        recommended_supplements = {}
        
        age = form_answers.get('age', 30)
        gender = form_answers.get('gender', 'unknown')
        symptoms = form_answers.get('symptoms', [])
        goals = form_answers.get('goals', [])
        
        # –ü—Ä–∞–≤–∏–ª–æ 1: –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤—Å–µ—Ö
        basic_supplements = [
            {'id': 'vitamin_d3', 'name': '–í–∏—Ç–∞–º–∏–Ω D3', 'priority': 'high'},
            {'id': 'omega_3', 'name': '–û–º–µ–≥–∞-3', 'priority': 'medium'},
            {'id': 'magnesium', 'name': '–ú–∞–≥–Ω–∏–π', 'priority': 'medium'}
        ]
        
        for supp in basic_supplements:
            if any(cat_supp['name'].lower() in supp['name'].lower() 
                   for cat_supp in supplements_catalog):
                recommended_supplements[supp['id']] = SupplementRecommendation(
                    name=supp['name'],
                    dose="–ü–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
                    duration="1-2 –º–µ—Å—è—Ü–∞",
                    priority=supp['priority'],
                    confidence=0.7
                )
        
        # –ü—Ä–∞–≤–∏–ª–æ 2: –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º
        if '—É—Å—Ç–∞–ª–æ—Å—Ç—å' in symptoms or '—É–ø–∞–¥–æ–∫ —Å–∏–ª' in symptoms:
            recommended_supplements['b_complex'] = SupplementRecommendation(
                name="–í–∏—Ç–∞–º–∏–Ω—ã –≥—Ä—É–ø–ø—ã B",
                dose="1 –∫–∞–ø—Å—É–ª–∞ —É—Ç—Ä–æ–º",
                duration="1 –º–µ—Å—è—Ü",
                priority="high",
                confidence=0.8
            )
        
        # –¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations_text = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ë–ê–î—ã:
        
        {', '.join([supp.name for supp in recommended_supplements.values()])}
        
        –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ü–µ–ª–µ–π. 
        –î–∞–Ω–Ω—ã–µ –ë–ê–î—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–∞–∂–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–Ω–µ—Ä–∞–ª–æ–≤.
        
        –í–ê–ñ–ù–û: –î–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç 
        –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –≤—Ä–∞—á–æ–º. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–∏–µ–º–∞ –ë–ê–î–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å 
        —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏–ª–∏ –≤—ã 
        –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.
        
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–æ–º —á–µ—Ä–µ–∑ 1 –º–µ—Å—è—Ü –ø—Ä–∏–µ–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
        """
        
        return {
            "supplements": recommended_supplements,
            "text": recommendations_text.strip(),
            "confidence": 0.6
        }
    
    def _validate_form_answers(self, answers: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –∞–Ω–∫–µ—Ç—ã"""
        try:
            validated = FormAnswersValidation(**answers)
            return validated.dict(exclude_none=True)
        except Exception as e:
            logger.warning(f"Form validation failed: {e}, using raw answers")
            return answers
    
    def _generate_cache_key(self, answers: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
        answers_str = json.dumps(answers, sort_keys=True)
        return hashlib.md5(answers_str.encode()).hexdigest()
    
    async def get_analysis_status(self, analysis_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        return await self.db_service.get_analysis_status(analysis_id)
    
    async def explain_recommendation(
        self, 
        analysis_id: str, 
        supplement_id: str
    ) -> Optional[str]:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        analysis = await self.db_service.get_analysis_by_id(analysis_id)
        if not analysis:
            return None
            
        # –ó–∞–ø—Ä–æ—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —É DeepSeek
        if not self.deepseek_client:
            return "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - DeepSeek API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
        try:
            response = await self.deepseek_client.chat.completions.create(
                model=settings.DEEPSEEK_MODEL,
                messages=[
                    {
                        "role": "system",
                        "content": "–û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –±—ã–ª —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –¥–∞–Ω–Ω—ã–π –ë–ê–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º."
                    },
                    {
                        "role": "user",
                        "content": f"–û–±—ä—è—Å–Ω–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ë–ê–î–∞ {supplement_id} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {analysis_id}"
                    }
                ],
                max_tokens=300,
                temperature=0.3
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"Failed to explain recommendation: {e}")
            return "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ." 