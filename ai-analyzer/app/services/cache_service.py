"""
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è CacheService
"""
from typing import Optional, Any


class CacheService:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        # –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à
        self._cache = {}
    
    async def get_analysis(self, cache_key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑ –∫—ç—à–∞"""
        result = self._cache.get(cache_key)
        if result:
            print(f"üîç [CACHE] –ù–∞–π–¥–µ–Ω –∫—ç—à –¥–ª—è –∫–ª—é—á–∞ {cache_key[:16]}...")
        return result
    
    async def store_analysis(self, cache_key: str, analysis_result: Any) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤ –∫—ç—à"""
        self._cache[cache_key] = analysis_result
        print(f"üíæ [CACHE] –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–ª—é—á–∞ {cache_key[:16]}...")
        return True
    
    async def invalidate_cache(self, cache_key: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞"""
        if cache_key in self._cache:
            del self._cache[cache_key]
            print(f"üóëÔ∏è [CACHE] –£–¥–∞–ª–µ–Ω –∫—ç—à –¥–ª—è –∫–ª—é—á–∞ {cache_key[:16]}...")
        return True
    
    async def clear_cache(self) -> bool:
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à"""
        self._cache.clear()
        print("üßπ [CACHE] –ö—ç—à –æ—á–∏—â–µ–Ω")
        return True 