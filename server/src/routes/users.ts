import { Router } from 'express';
import { PrismaClient } from '@prisma/client';
import { authMiddleware } from '@/middleware/auth';
import { validateRequest } from '@/middleware/validation';
import { smsService } from '@/services/SmsService';
import Joi from 'joi';

const router = Router();
const prisma = new PrismaClient();

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const phoneSchema = Joi.object({
  phone: Joi.string().pattern(/^\+[1-9]\d{1,14}$/).required()
    .messages({
      'string.pattern.base': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+79991234567)'
    })
});

const verifyCodeSchema = Joi.object({
  code: Joi.string().length(6).pattern(/^\d{6}$/).required()
    .messages({
      'string.length': 'SMS –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä',
      'string.pattern.base': 'SMS –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'
    })
});

// GET /api/users/stats - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/stats', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–Ω–∫–µ—Ç–∞–º
    const formsCount = await prisma.form.count({
      where: { userId }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º (–∞–Ω–∞–ª–∏–∑–∞–º)
    const analysesCount = await prisma.form.count({
      where: { 
        userId,
        recommendations: {
          some: {}
        }
      }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø–æ–ª—è –≤ –ë–î)
    const averageConfidence = analysesCount > 0 ? 85 : 0; // –ó–∞–≥–ª—É—à–∫–∞

    res.json({
      success: true,
      stats: {
        formsCount,
        analysesCount, 
        averageConfidence
      }
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/users/analyses - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/analyses', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    const analyses = await prisma.form.findMany({
      where: { 
        userId,
        recommendations: {
          some: {}
        }
      },
      include: {
        recommendations: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    res.json({
      success: true,
      analyses: analyses.map(form => ({
        id: form.id,
        date: form.createdAt,
        status: 'completed',
        confidence: Math.round(form.recommendations.reduce((sum, rec) => sum + rec.confidence, 0) / form.recommendations.length * 100) || 0,
        recommendations: form.recommendations.map(rec => ({
          name: rec.name,
          dosage: rec.dose,
          priority: rec.confidence > 0.8 ? 'high' : rec.confidence > 0.5 ? 'medium' : 'low'
        }))
      }))
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/users/all-forms - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—è pending
router.get('/all-forms', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allForms = await prisma.form.findMany({
      where: { userId },
      include: {
        recommendations: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    res.json({
      success: true,
      forms: allForms.map(form => ({
        id: form.id,
        date: form.createdAt,
        status: form.recommendations.length > 0 ? 'completed' : 'pending',
        confidence: form.recommendations.length > 0 
          ? Math.round(form.recommendations.reduce((sum, rec) => sum + rec.confidence, 0) / form.recommendations.length * 100) 
          : 0,
        recommendationsCount: form.recommendations.length,
        recommendations: form.recommendations.map(rec => ({
          name: rec.name,
          dosage: rec.dose,
          priority: rec.confidence > 0.8 ? 'high' : rec.confidence > 0.5 ? 'medium' : 'low'
        }))
      }))
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ä–º:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/users/profile - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/profile', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        name: true,
        email: true,
        phone: true,
        phoneVerified: true,
        phoneVerifiedAt: true,
        createdAt: true
      }
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      user
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/users/phone - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
router.post('/phone', authMiddleware, validateRequest(phoneSchema), async (req, res) => {
  try {
    const userId = (req as any).userId;
    const { phone } = req.body;

    console.log('üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, phone);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (phone) {
      const existingUserWithPhone = await prisma.user.findFirst({
        where: {
          phone,
          id: { not: userId } // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
      });

      if (existingUserWithPhone) {
        return res.status(409).json({
          success: false,
          message: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        });
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    await prisma.user.update({
      where: { id: userId },
      data: {
        phone,
        phoneVerified: false,
        phoneVerifiedAt: null
      }
    });

    res.json({
      success: true,
      message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ SMS –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/users/phone/verify - –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞
router.post('/phone/verify', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { phone: true, phoneVerified: true }
    });

    if (!user || !user.phone) {
      return res.status(400).json({
        success: false,
        message: '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      });
    }

    if (user.phoneVerified) {
      return res.status(400).json({
        success: false,
        message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      });
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.phoneVerification.deleteMany({
      where: {
        userId,
        verified: false
      }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    const code = smsService.generateCode();
    const codeHash = smsService.hashCode(code);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç)
    const expiresAt = new Date(Date.now() + (parseInt(process.env.SMS_CODE_EXPIRY_MINUTES || '10') * 60 * 1000));
    
    console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ SMS.ru
    const smsResult = await smsService.sendSms(user.phone, code);
    
    if (!smsResult.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', smsResult.message);
      return res.status(500).json({
        success: false,
        message: smsResult.message
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –∫–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.phoneVerification.create({
      data: {
        userId,
        phone: user.phone,
        codeHash,
        smsId: smsResult.smsId,
        expiresAt
      }
    });

    console.log('‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, ID:', smsResult.smsId);

    res.json({
      success: true,
      message: 'SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      // –í development —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      developmentCode: process.env.NODE_ENV === 'development' && !smsService.getSettings().enabled ? code : undefined
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/users/phone/confirm - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ SMS –∫–æ–¥–∞
router.post('/phone/confirm', authMiddleware, validateRequest(verifyCodeSchema), async (req, res) => {
  try {
    const userId = (req as any).userId;
    const { code } = req.body;

    console.log('üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ SMS –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const verifications = await prisma.phoneVerification.findMany({
      where: {
        userId,
        verified: false,
        expiresAt: { gt: new Date() }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (verifications.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
      });
    }

    // –ò—â–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ö—ç—à–µ–º –∫–æ–¥–∞
    let matchedVerification = null;
    
    for (const verification of verifications) {
      if (smsService.verifyCode(code, verification.codeHash)) {
        matchedVerification = verification;
        break;
      }
    }

    if (!matchedVerification) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∏ –ª–∏ –≤—Å–µ –∫–æ–¥—ã
      const hasExpiredCodes = await prisma.phoneVerification.count({
        where: {
          userId,
          verified: false,
          expiresAt: { lt: new Date() }
        }
      });

      if (hasExpiredCodes > 0) {
        return res.status(400).json({
          success: false,
          message: 'SMS –∫–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.'
        });
      }

      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π SMS –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.'
      });
    }

    console.log('‚úÖ SMS –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, ID –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', matchedVerification.id);

    // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await prisma.phoneVerification.update({
      where: { id: matchedVerification.id },
      data: { verified: true }
    });

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const phone = matchedVerification.phone;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { phone: true, phoneVerified: true }
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    if (user.phone !== phone) {
      return res.status(400).json({
        success: false,
        message: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É'
      });
    }

    if (user.phoneVerified) {
      return res.status(400).json({
        success: false,
        message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const phoneOwner = await prisma.user.findFirst({
      where: {
        phone: phone,
        phoneVerified: true,
        id: { not: userId }
      }
    });

    if (phoneOwner) {
      return res.status(409).json({
        success: false,
        message: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
      });
    }

    // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
    await prisma.user.update({
      where: { id: userId },
      data: {
        phoneVerified: true,
        phoneVerifiedAt: new Date()
      }
    });

    // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.phoneVerification.deleteMany({
      where: {
        userId,
        verified: false,
        id: { not: matchedVerification.id }
      }
    });

    console.log('üéâ –¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    res.json({
      success: true,
      message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!'
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è SMS:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

export { router as usersRouter }; 