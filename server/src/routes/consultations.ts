import { Router } from 'express';
import { authMiddleware } from '@/middleware/auth';
import { consultationService } from '@/services/ConsultationService';
import { PrismaClient } from '@prisma/client';

const router = Router();
const prisma = new PrismaClient();

// GET /api/consultations/schedule - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
router.get('/schedule', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;
    const days = parseInt(req.query.days as string) || 14;

    console.log('üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞', days, '–¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { hasConsultation: true }
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    const schedule = [];
    const today = new Date();
    
    for (let i = 0; i < days; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      const dayName = date.toLocaleDateString('ru-RU', { weekday: 'long' });
      const dateStr = date.toISOString().split('T')[0];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å 9:00 –¥–æ 18:00
      const slots = [];
      for (let hour = 9; hour <= 18; hour++) {
        const time = `${hour.toString().padStart(2, '0')}:00`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        const existingConsultation = await prisma.consultation.findFirst({
          where: {
            date: date,
            time: time,
            status: {
              in: ['SCHEDULED', 'CONFIRMED']
            }
          }
        });

        const isAvailable = !existingConsultation;
        const isFirstConsultation = !user.hasConsultation;
        
        slots.push({
          id: `${dateStr}-${time}`,
          time,
          available: isAvailable,
          price: isFirstConsultation ? 1 : 1500,
          isFirstConsultation
        });
      }
      
      schedule.push({
        date: dateStr,
        dayName: dayName.charAt(0).toUpperCase() + dayName.slice(1),
        slots
      });
    }

    res.json({
      success: true,
      schedule,
      userHasConsultation: user.hasConsultation
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/consultations/book - –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
router.post('/book', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;
    const { date, time, formId } = req.body;

    console.log('üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:', { userId, date, time, formId });

    if (!date || !time) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { hasConsultation: true }
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    const existingConsultation = await prisma.consultation.findFirst({
      where: {
        date: new Date(date),
        time: time,
        status: {
          in: ['SCHEDULED', 'CONFIRMED']
        }
      }
    });

    if (existingConsultation) {
      return res.status(400).json({
        success: false,
        message: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –∏ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const isFirstConsultation = !user.hasConsultation;
    const price = isFirstConsultation ? 1 : 1500;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const consultation = await prisma.consultation.create({
      data: {
        userId,
        formId: formId || null,
        date: new Date(date),
        time,
        price,
        isFirst: isFirstConsultation,
        status: 'SCHEDULED'
      }
    });

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (isFirstConsultation) {
      await prisma.user.update({
        where: { id: userId },
        data: { hasConsultation: true }
      });
    }

    res.json({
      success: true,
      message: '–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
      consultation: {
        id: consultation.id,
        date: consultation.date,
        time: consultation.time,
        price: consultation.price,
        isFirst: consultation.isFirst
      }
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/consultations/my - –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
router.get('/my', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    console.log('üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const consultations = await prisma.consultation.findMany({
      where: { userId },
      orderBy: { date: 'desc' },
      include: {
        form: {
          select: {
            id: true,
            createdAt: true
          }
        }
      }
    });

    res.json({
      success: true,
      consultations: consultations.map(consultation => ({
        id: consultation.id,
        date: consultation.date,
        time: consultation.time,
        status: consultation.status,
        price: consultation.price,
        isFirst: consultation.isFirst,
        notes: consultation.notes,
        meetingLink: consultation.meetingLink,
        createdAt: consultation.createdAt,
        hasForm: !!consultation.form
      }))
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// DELETE /api/consultations/:id/cancel - –û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
router.delete('/:id/cancel', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;
    const consultationId = req.params.id;

    console.log('‚ùå –û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', { userId, consultationId });

    const consultation = await prisma.consultation.findFirst({
      where: {
        id: consultationId,
        userId
      }
    });

    if (!consultation) {
      return res.status(404).json({
        success: false,
        message: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    if (consultation.status === 'COMPLETED') {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'
      });
    }

    await prisma.consultation.update({
      where: { id: consultationId },
      data: { status: 'CANCELLED' }
    });

    res.json({
      success: true,
      message: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞'
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/consultations/check - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
router.get('/check', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    console.log('üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const eligibility = await consultationService.checkFreeConsultationEligibility(userId);

    res.json({
      success: true,
      eligible: eligibility.eligible,
      message: eligibility.message,
      lastConsultation: eligibility.lastConsultation
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// POST /api/consultations/request - –ó–∞–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
router.post('/request', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    console.log('üìû –ó–∞–ø—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    const eligibility = await consultationService.checkFreeConsultationEligibility(userId);

    if (!eligibility.eligible) {
      return res.status(400).json({
        success: false,
        message: eligibility.message,
        lastConsultation: eligibility.lastConsultation
      });
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const result = await consultationService.logFreeConsultation(userId);

    if (!result.success) {
      return res.status(400).json({
        success: false,
        message: result.message
      });
    }

    res.json({
      success: true,
      message: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!',
      consultationId: result.consultationId
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/consultations/history - –ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/history', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;

    console.log('üìû –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const history = await consultationService.getUserConsultationHistory(userId);

    if (!history.success) {
      return res.status(500).json({
        success: false,
        message: history.message
      });
    }

    res.json({
      success: true,
      consultations: history.consultations
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// GET /api/consultations/count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
router.get('/count', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).userId;
    const days = parseInt(req.query.days as string) || 30;

    console.log('üìû –ü–æ–¥—Å—á–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞', days, '–¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const count = await consultationService.getConsultationCount(userId, days);

    res.json({
      success: true,
      count: count.count,
      period: count.period
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

export { router as consultationsRouter }; 