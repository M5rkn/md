import axios from 'axios';
import * as crypto from 'crypto';

interface SmsResponse {
  status: string;
  status_code: number;
  sms?: {
    [key: string]: {
      status: string;
      status_code: number;
      sms_id: string;
    };
  };
  balance?: number;
  error?: string;
}

export class SmsService {
  private apiId: string;
  private from: string;
  private enabled: boolean;
  private baseUrl = 'https://sms.ru/sms/send';

  constructor() {
    this.apiId = process.env.SMS_RU_API_ID || '';
    this.from = process.env.SMS_RU_FROM || 'RABOTAA';
    this.enabled = process.env.SMS_ENABLE === 'true';
    
    if (this.enabled && !this.apiId) {
      console.warn('‚ö†Ô∏è SMS.ru API ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, SMS –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      this.enabled = false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π SMS –∫–æ–¥
   */
  generateCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –∫–æ–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  hashCode(code: string): string {
    return crypto.createHash('sha256').update(code).digest('hex');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø—Ä–æ—Ç–∏–≤ —Ö—ç—à–∞
   */
  verifyCode(code: string, hash: string): boolean {
    const codeHash = this.hashCode(code);
    return codeHash === hash;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è SMS.ru API
   */
  private formatPhone(phone: string): string {
    // –£–±–∏—Ä–∞–µ–º + –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    return phone.replace(/\D/g, '');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ SMS.ru API
   */
  async sendSms(phone: string, code: string): Promise<{ success: boolean; message: string; smsId?: string }> {
    if (!this.enabled) {
      console.log('üì± SMS –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:', code);
      return {
        success: true,
        message: 'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)',
        smsId: 'dev_' + Date.now()
      };
    }

    try {
      const formattedPhone = this.formatPhone(phone);
      const message = `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è RABOTAA: ${code}. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.`;

      console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –Ω–∞ –Ω–æ–º–µ—Ä:', phone);
      console.log('üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', message);

      const response = await axios.post<SmsResponse>(this.baseUrl, null, {
        params: {
          api_id: this.apiId,
          to: formattedPhone,
          msg: message,
          from: this.from,
          json: 1
        },
        timeout: 10000
      });

      console.log('üì® –û—Ç–≤–µ—Ç SMS.ru:', response.data);

      if (response.data.status === 'OK') {
        const smsData = response.data.sms?.[formattedPhone];
        if (smsData && smsData.status === 'OK') {
          return {
            success: true,
            message: 'SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            smsId: smsData.sms_id
          };
        } else {
          return {
            success: false,
            message: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: ${smsData?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          };
        }
      } else {
        return {
          success: false,
          message: response.data.error || '–û—à–∏–±–∫–∞ SMS —Å–µ—Ä–≤–∏—Å–∞'
        };
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error);
      
      if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
        return {
          success: false,
          message: 'SMS —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }
      
      if (error.response?.data) {
        return {
          success: false,
          message: error.response.data.error || '–û—à–∏–±–∫–∞ SMS API'
        };
      }

      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SMS —Å–µ—Ä–≤–∏—Å–∞
   */
  async checkBalance(): Promise<{ success: boolean; balance?: number; message: string }> {
    if (!this.enabled) {
      return {
        success: true,
        message: 'SMS —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)'
      };
    }

    try {
      const response = await axios.get('https://sms.ru/my/balance', {
        params: {
          api_id: this.apiId,
          json: 1
        },
        timeout: 5000
      });

      if (response.data.status === 'OK') {
        return {
          success: true,
          balance: response.data.balance,
          message: `–ë–∞–ª–∞–Ω—Å: ${response.data.balance} —Ä—É–±.`
        };
      } else {
        return {
          success: false,
          message: response.data.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞'
        };
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ SMS:', error);
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å SMS —Å–µ—Ä–≤–∏—Å–∞'
      };
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö SMS
   */
  getSettings() {
    return {
      enabled: this.enabled,
      provider: 'SMS.ru',
      from: this.from,
      hasApiKey: !!this.apiId
    };
  }
}

export const smsService = new SmsService(); 