import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export class ConsultationService {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
   */
  async checkFreeConsultationEligibility(userId: string): Promise<{
    eligible: boolean;
    message: string;
    lastConsultation?: Date;
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: {
          phone: true,
          phoneVerified: true
        }
      });

      if (!user) {
        return {
          eligible: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (!user.phone) {
        return {
          eligible: false,
          message: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        };
      }

      if (!user.phoneVerified) {
        return {
          eligible: false,
          message: '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        };
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω–æ–º–µ—Ä –≤—Å–µ –µ—â–µ —É–Ω–∏–∫–∞–ª–µ–Ω
      const phoneOwner = await prisma.user.findFirst({
        where: {
          phone: user.phone,
          phoneVerified: true
        }
      });

      if (!phoneOwner || phoneOwner.id !== userId) {
        return {
          eligible: false,
          message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const recentConsultation = await prisma.consultationLog.findFirst({
        where: {
          userId,
          phone: user.phone,
          createdAt: {
            gte: thirtyDaysAgo
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      });

      if (recentConsultation) {
        return {
          eligible: false,
          message: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ',
          lastConsultation: recentConsultation.createdAt
        };
      }

      return {
        eligible: true,
        message: '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'
      };

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
      return {
        eligible: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
   */
  async logFreeConsultation(userId: string): Promise<{
    success: boolean;
    message: string;
    consultationId?: string;
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const user = await prisma.user.findUnique({
        where: { id: userId },
        select: {
          phone: true,
          phoneVerified: true
        }
      });

      if (!user || !user.phone || !user.phoneVerified) {
        return {
          success: false,
          message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
        };
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
      const consultation = await prisma.consultationLog.create({
        data: {
          userId,
          phone: user.phone
        }
      });

      console.log('üìû –ó–∞–ø–∏—Å–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:', {
        userId,
        phone: user.phone,
        consultationId: consultation.id
      });

      return {
        success: true,
        message: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞',
        consultationId: consultation.id
      };

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserConsultationHistory(userId: string): Promise<{
    success: boolean;
    consultations: Array<{
      id: string;
      phone: string;
      createdAt: Date;
    }>;
    message?: string;
  }> {
    try {
      const consultations = await prisma.consultationLog.findMany({
        where: { userId },
        orderBy: { createdAt: 'desc' },
        select: {
          id: true,
          phone: true,
          createdAt: true
        }
      });

      return {
        success: true,
        consultations
      };

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
      return {
        success: false,
        consultations: [],
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   */
  async getConsultationCount(userId: string, days: number = 30): Promise<{
    count: number;
    period: string;
  }> {
    try {
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);

      const count = await prisma.consultationLog.count({
        where: {
          userId,
          createdAt: {
            gte: startDate
          }
        }
      });

      return {
        count,
        period: `${days} –¥–Ω–µ–π`
      };

    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', error);
      return {
        count: 0,
        period: `${days} –¥–Ω–µ–π`
      };
    }
  }
}

export const consultationService = new ConsultationService(); 